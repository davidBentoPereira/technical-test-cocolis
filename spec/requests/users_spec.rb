require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:user) }

  let(:invalid_attributes) do
    { email: 'aaa', first_name: 'a', last_name: 'a', password: 'aaaaaa', password_confirmation: 'aaaaaa', admin: false }
  end

  let!(:admin) { create(:user, :is_admin) }
  let!(:user) { create(:user) }
  let!(:users) { create_list(:user, 2) }

  describe 'GET /index' do
    context 'when user is admin' do
      before(:each) do
        sign_in(admin)
        get admin_users_path
      end

      it 'renders a successful response' do
        expect(response).to be_successful
      end

      it 'returns all the users' do
        expect(assigns(:users)).to include(admin, users.first, users.last)
      end

      it 'renders the template index' do
        expect(response).to render_template(:index)
      end
    end

    context "when user isn't admin" do
      it 'returns itself' do
        sign_in(users.first)
        get admin_users_path
        expect(assigns(:users)).to eq([users.first])
      end
    end
  end

  describe 'GET /show' do
    context 'when user is admin' do
      before(:each) do
        sign_in(admin)
      end

      it 'renders a successful response' do
        get admin_user_path(admin)
        expect(response).to be_successful
      end

      it 'can access its own profile' do
        get admin_user_path(admin)
        expect(assigns(:user)).to eq(admin)
      end

      it "can access an other user's profile" do
        get admin_user_path(users.first)
        expect(assigns(:user)).to eq(users.first)
      end

      it 'renders the template show' do
        get admin_user_path(admin)
        expect(response).to render_template(:show)
      end
    end

    context 'when user is not admin' do
      before(:each) do
        sign_in(user)
      end

      it 'can access its own profile' do
        get admin_user_path(user)
        expect(assigns(:user)).to eq(user)
      end

      context 'as not authorized' do
        it 'redirects to home page' do
          get admin_user_path(users.last)
          expect(response).to redirect_to root_path
        end
      end
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      sign_in(admin)
      get new_admin_user_path
      expect(response).to be_successful
    end

    it 'renders the template new' do
      sign_in(admin)
      get new_admin_user_path
      expect(response).to render_template(:new)
    end
  end

  describe 'GET /edit' do
    context 'when user is admin' do
      it 'renders a successful response' do
        sign_in(admin)
        get edit_admin_user_path(admin)
        expect(response).to be_successful
      end

      it 'can access its own profile' do
        sign_in(admin)
        get edit_admin_user_path(admin)
        expect(response).to be_successful
      end

      it "can access other users' profiles" do
        sign_in(admin)
        get edit_admin_user_path(user)
        expect(response).to be_successful
      end

      it 'renders the template new' do
        sign_in(admin)
        get edit_admin_user_path(user)
        expect(response).to render_template(:edit)
      end
    end

    context 'when user is not admin' do
      it 'can access its own profile' do
        sign_in(user)
        get edit_admin_user_path(user)
        expect(response).to be_successful
      end

      context 'as not authorized' do
        it 'redirects to home page' do
          sign_in(user)
          get edit_admin_user_path(users.first)
          expect(response).to redirect_to root_path
        end
      end
    end
  end

  describe 'POST /create' do
    before(:each) { sign_in(admin) }

    context 'with valid parameters' do
      it 'creates a new User' do
        expect do
          post admin_users_url, params: { user: valid_attributes }
        end.to change(User, :count).by(1)
      end

      it 'redirects to the created user' do
        post admin_users_path, params: { user: valid_attributes }
        expect(response).to redirect_to(admin_user_path(User.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new User' do
        expect do
          post admin_users_path, params: { user: invalid_attributes }
        end.to change(User, :count).by(0)
      end
    end
  end

  describe 'PATCH /update' do
    before(:each) { sign_in(admin) }

    context 'with valid parameters' do
      let(:new_attributes) { attributes_for(:user) }

      it 'updates the requested user' do
        patch admin_user_path(user), params: { user: new_attributes }
        expect(user.reload.first_name).to eq(new_attributes[:first_name])
      end

      it 'redirects to the user' do
        user = User.create!(valid_attributes)
        patch admin_user_path(user), params: { user: new_attributes }
        user.reload
        expect(response).to redirect_to(admin_user_path(user))
      end
    end
  end

  describe 'DELETE /destroy' do
    before(:each) { sign_in(admin) }

    it 'destroys the requested user' do
      user = User.create! valid_attributes
      expect do
        delete admin_user_path(user)
      end.to change(User, :count).by(-1)
    end

    it 'redirects to the users list' do
      user = User.create! valid_attributes
      delete admin_user_path(user)
      expect(response).to redirect_to(admin_users_path)
    end
  end
end
